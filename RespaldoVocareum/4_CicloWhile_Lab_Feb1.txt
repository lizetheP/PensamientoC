<div style="font-family:verdana; font-size:10px">
<h3> Ciclo While  </h3>

Implementa las siguientes funciones, recuerda que las funciones se definen antes de la codificación del script principal. 

El archivo se debe llamar <strong>ciclos1.py</strong>

La función <strong> potencia (x, n) </strong> que recibe dos números enteros x y n  y regresa el resultado de elevar x a la n. Utiliza el ciclo while. 

Casos de prueba: 
Input: Número de opción (1. Potencia) 
Input: Número a elevar (entero) 
Input: Potencia a la que será elevado el número (entero) 
Output: Número elevado a la potencia (entero)

>>> 1
>>> 2
>>> 3
8 

La función <strong> sumatoria (n) </strong> que recibe un valor entero n mayor o igual a uno y regresa el resultado de la siguiente sumatoria. Utiliza el ciclo while y la función potencia implementada anteriormente, es decir, en lugar de utilizar la función math.pow(x,y), utiliza la función potencia(x,y) para elevar por ejemplo i^5.
                    
Casos de prueba: 
Input: Número de opción (2. Sumatoria) 
Input: Valor de n (entero) 
Output: Resultado de la sumatoria (real con dos decimales) 

>>> 2
>>> 4
1.63

La función <strong> serie (n) </strong> que recibe un valor entero n mayor o igual a uno y regresa el resultado de la siguiente serie:
          
serie(n) = 10 - 11 + 12 - 13 ....

Ejemplos: 
serie (2) = 10 - 11 = - 1 
serie (3) = 10 - 11 + 12 = 11 Casos de prueba: 

Input: Número de opción (3. Serie) 
Input: Valor de n (entero) 
Output: Resultado de la sumatoria (entero) 

>>> 3
>>> 2
-1 

La función <strong> aproximacion_PI (n) </strong> que recibe el límite N de la serie para calcular la aproximación de PI. Existen diferentes algoritmos que nos permiten obtener una cercana aproximación al valor de la constante PI, uno de ellos es el Algoritmo de Gottfried Wilhem Von Leibniz:                    
Entre mayor sea el límite de la serie (N), es más cercana la aproximación que se obtiene. 

Casos de prueba: 
Input: Número de opción (4. Aproximación PI) 
Input: Valor de n (entero) 
Output: Aproximación de PI (real con cuatro decimales) 

>>> 4
>>> 1000
3.1396 

La función <strong> division (num, den) </strong> que recibe dos números enteros positivos num y den y calcula la división entera de num entre den utilizando el ciclo while y la operación resta. 
Ejemplos: 
division (16, 3) = 5 

Casos de prueba: 
Input: Número de opción (5. División) 
Input: Númerador (entero) 
Input: Denominador (entero) 
Output: Resultado (entero)

>>> 5
>>> 16
>>> 3
5 

La función <strong> menu () </strong> que despliegue el siguiente menú en pantalla:
1. Potencia
2. Sumatoria
3. Serie
4. Aproximación PI
5. División
6. Salir

Casos de prueba:
Input: Número de opción (6. Salir)
Output: Mensaje "Adios" 

>>> 6
Adios

Casos de prueba:
Input: Número de opción (Opción inválida)
Output: Mensaje "Opcion_invalida" 

>>> -5
Opcion_invalida

La función <strong> main() </strong> que utilice la función menu para desplegar el menú correspondiente y de acuerdo a la opción seleccionada por el usuario le dé la oportunidad de ejecutar cualquiera de las funciones que han sido construidas. Utiliza el estatuto de control if anidado. Recuerda que la captura de datos debe ser realizada en la sección del main.  En el script principal manda llamar a la función main.

NOTA IMPORTANTE: Tu programa no debe incluir ningún mensaje para pedir los datos y no debe incluir ningún mensaje diferente de lo que se te pide como salida. 

El archivo se debe llamar <strong>ciclos1.py</strong>
</div>

import math

def potencia(x, n):
    cont = 1
    acum = 1
    while cont <= n:
        acum = acum * x
        cont = cont + 1
    return acum

def sumatoria(n):
    i = 1
    acum = 0
    while i <= n:
        acum = acum + math.sqrt(3/4*i) / (math.sqrt(potencia(i,5)) - potencia(i,2) + 1)
        i = i + 1
    return acum

def serie(n):
    i = 1
    acum = 0
    num = 10
    signo = 1
    while i <= n:
        acum = acum + num*signo
        signo = signo * -1
        num = num + 1
        i = i + 1
    return acum

def aproximacion_PI(n):
    i = 1
    acum = 0
    signo = 1
    while i <= n:
        acum = acum + 1/i*signo
        signo = signo * -1
        i = i + 2
    return 4*acum

def division(num, den):
    cont = 0
    while num >= den:
        num = num - den
        cont = cont + 1
    return cont

def menu():
    print("1. Potencia")
    print("2. Sumatoria")
    print("3. Serie")
    print("4. Aproximación PI")
    print("5. División")
    print("6. Salir")

def main():
    opcion = int(input())
    if opcion == 1:
        x = int(input())
        n = int(input())
        res = potencia(x, n)
        print(res)
    elif opcion == 2:
        n = int(input())
        res = sumatoria(n)
        print("%.2f" % res)
    elif opcion == 3:
        n = int(input())
        res = serie(n)
        print(res)
    elif opcion == 4:
        n = int(input())
        res = aproximacion_PI(n)
        print("%.4f" % res)
    elif opcion == 5:
        n = int(input())
        d = int(input())
        res = division(n, d)
        print(res)
    elif opcion == 6:
        print("Adios")
    else:
        print("Opcion_invalida")

main()